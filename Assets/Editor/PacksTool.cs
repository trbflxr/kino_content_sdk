using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using UnityEditor;
using UnityEngine;
using Debug = UnityEngine.Debug;

// DO NOT EDIT THIS FILE
namespace Editor {
  public class PacksTool : EditorWindow {
    private const float OFFSET = 5.0f;

    private static AuthorMeta authorMeta_;
    private static BuilderMeta builderMeta_;
    private readonly List<PartPackMeta> packs_ = new List<PartPackMeta>();

    private readonly PacksBuilder builder_ = new PacksBuilder();

    private Vector2 scrollPos_ = Vector2.zero;

    [MenuItem("Kino/Packs build tool")]
    public static void ShowWindow() {
      GetWindow(typeof(PacksTool));
    }

    [MenuItem("Kino/Open Build folder")]
    private static void OpenBuildFolder() {
      if (!builderMeta_) {
        return;
      }

      if (Directory.Exists(builderMeta_.BuildFolder)) {
        Process.Start(builderMeta_.BuildFolder);
      }
      else {
        Debug.LogError("Kino: Unable to open build packs folder, the folder doesn't exists");
      }
    }

    private void OnFocus() {
      Refresh();
    }

    private void OnGUI() {
      if (!authorMeta_ || !builderMeta_) {
        GUILayout.Label("Unable to load meta", EditorStyles.boldLabel);

        if (!authorMeta_ && GUILayout.Button("Create author meta")) {
          CreateAsset(ref authorMeta_, AuthorMeta.ASSET_NAME);
        }

        if (!builderMeta_ && GUILayout.Button("Create builder meta")) {
          CreateAsset(ref builderMeta_, BuilderMeta.ASSET_NAME);
        }

        return;
      }

      DrawAuthorMeta();
      DrawBuilderMeta();

      DrawPacks();

      DrawButtons();
    }

    private void DrawAuthorMeta() {
      bool guiEnabled = GUI.enabled;

      GUI.enabled = false;

      GUILayout.Label("Author name:", EditorStyles.boldLabel);
      EditorGUILayout.TextField(authorMeta_.Name);

      GUILayout.Label("Author SteamID:", EditorStyles.boldLabel);
      EditorGUILayout.LongField((long)authorMeta_.SteamId);

      GUILayout.Label("Author DiscordID:", EditorStyles.boldLabel);
      EditorGUILayout.LongField((long)authorMeta_.DiscordId);

      GUILayout.Space(OFFSET);

      GUI.enabled = true;
      if (GUILayout.Button("Edit")) {
        Utils.SelectObject(authorMeta_);
      }

      GUI.enabled = guiEnabled;

      DrawHorizontalGUILine();
    }

    private void DrawBuilderMeta() {
      bool guiEnabled = GUI.enabled;

      GUI.enabled = false;

      GUILayout.Label("Build folder:", EditorStyles.boldLabel);
      EditorGUILayout.TextField(builderMeta_.BuildFolder);

      GUILayout.Space(OFFSET);

      GUI.enabled = true;
      if (GUILayout.Button("Edit")) {
        Utils.SelectObject(builderMeta_);
      }

      GUI.enabled = guiEnabled;

      DrawHorizontalGUILine();
    }

    private void DrawPacks() {
      GUILayout.Label("Part packs:", EditorStyles.boldLabel);

      EditorGUILayout.Space(OFFSET);

      scrollPos_ = GUILayout.BeginScrollView(scrollPos_);
      foreach (var pack in packs_) {
        GUILayout.Label(pack.PackName, EditorStyles.boldLabel);

        GUILayout.BeginHorizontal();

        pack.SelectedToBuild = EditorGUILayout.Toggle("Selected to build", pack.SelectedToBuild);
        if (GUILayout.Button("Edit")) {
          Utils.SelectObject(pack);
        }

        GUILayout.EndHorizontal();

        EditorGUILayout.Space(OFFSET);
        DrawHorizontalGUILine();
      }

      GUILayout.EndScrollView();
    }

    private void DrawButtons() {
      DrawHorizontalGUILine();

      if (GUILayout.Button($"Build for '{EditorUserBuildSettings.activeBuildTarget}'")) {
        builder_.Build(EditorUserBuildSettings.activeBuildTarget, builderMeta_, authorMeta_, packs_);
      }

      if (GUILayout.Button("Open Build folder")) {
        OpenBuildFolder();
      }
    }

    private void DrawHorizontalGUILine(int height = 1) {
      GUILayout.Space(OFFSET);

      var rect = GUILayoutUtility.GetRect(1.0f, height, GUILayout.ExpandWidth(true));
      rect.height = height;
      rect.xMin = 0;
      rect.xMax = EditorGUIUtility.currentViewWidth;

      var lineColor = new Color32(0x19, 0x19, 0x19, 0xff);
      EditorGUI.DrawRect(rect, lineColor);
      GUILayout.Space(OFFSET);
    }

    private void CreateAsset<T>(ref T metaObject, string assetName) where T : BaseBuilderMeta {
      if (metaObject) {
        return;
      }

      metaObject = CreateInstance<T>();
      if (!metaObject) {
        Debug.LogError($"kino: Unable to create asset '{typeof(T)}'");
        return;
      }

      AssetDatabase.CreateAsset(metaObject, $"Assets/{assetName}");
      metaObject.Validate();

      AssetDatabase.SaveAssets();

      Refresh();

      Utils.SelectObject(metaObject);
    }

    private void Refresh() {
      authorMeta_ = AuthorMeta.GetInstance();
      builderMeta_ = BuilderMeta.GetInstance();

      packs_.Clear();
      packs_.AddRange(PartPackMeta.GetAllInstances());
    }
  }
}