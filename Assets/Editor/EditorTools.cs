using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using UnityEditor;
using UnityEngine;
using Debug = UnityEngine.Debug;

// DO NOT EDIT THIS FILE
namespace Editor {
	public class CarPartsTool : BaseEditorTool<CarPartsBuilderMeta, CarPartsMeta, CarPartsBuilder> { }
	public class StickerPacksTool : BaseEditorTool<StickerPacksBuilderMeta, StickerPackMeta, StickerPacksBuilder> { }
	public class CustomObjectsTool : BaseEditorTool<CustomObjectsBuilderMeta, CustomObjectsMeta, CustomObjectsBuilder> { }

	public abstract class BaseEditorTool<T, V, B> : EditorWindow where T : BaseBuilderMeta<T> where V : BaseEntryMeta<V> where B : BaseBuilder<T, V>, new() {
		protected const float OFFSET = 5.0f;

		protected IReadOnlyList<V> Entries => entries_;
		private readonly List<V> entries_ = new();

		protected AuthorMeta authorMeta_;
		protected T builderMeta_;

		private readonly B builder_ = new();

		private Vector2 scrollPos_ = Vector2.zero;

		private void OnFocus() {
			Refresh();
		}

		private void OnGUI() {
			if (!DrawMetaGui()) {
				return;
			}

			DrawAuthorMeta();
			DrawBuilderMeta();

			DrawEntries();

			DrawButtons();
		}

		protected bool DrawMetaGui() {
			if (authorMeta_ && builderMeta_) {
				return true;
			}

			GUILayout.Label("Unable to load meta", EditorStyles.boldLabel);

			if (!authorMeta_ && GUILayout.Button("Create author meta")) {
				CreateAsset(ref authorMeta_);
			}

			if (!builderMeta_ && GUILayout.Button("Create builder meta")) {
				CreateAsset(ref builderMeta_);
			}

			return false;
		}

		protected void DrawAuthorMeta() {
			bool guiEnabled = GUI.enabled;

			GUI.enabled = false;

			GUILayout.Label("Author name:", EditorStyles.boldLabel);
			EditorGUILayout.TextField(authorMeta_.Name);

			GUILayout.Label("Author SteamID:", EditorStyles.boldLabel);
			EditorGUILayout.LongField((long) authorMeta_.SteamId);

			GUILayout.Label("Author DiscordID:", EditorStyles.boldLabel);
			EditorGUILayout.LongField((long) authorMeta_.DiscordId);

			GUILayout.Space(OFFSET);

			GUI.enabled = true;
			if (GUILayout.Button("Edit")) {
				Utils.SelectObject(authorMeta_);
			}

			GUI.enabled = guiEnabled;

			DrawHorizontalGUILine();
		}

		protected virtual void DrawBuilderMeta() {
			bool guiEnabled = GUI.enabled;

			GUI.enabled = false;

			GUILayout.Label("Build folder:", EditorStyles.boldLabel);
			EditorGUILayout.TextField(builderMeta_.BuildFolder);

			GUILayout.Space(OFFSET);

			GUI.enabled = true;
			if (GUILayout.Button("Edit")) {
				Utils.SelectObject(builderMeta_);
			}

			GUI.enabled = guiEnabled;

			DrawHorizontalGUILine();
		}

		protected virtual void DrawEntries() {
			GUILayout.Label("Entries:", EditorStyles.boldLabel);

			EditorGUILayout.Space(OFFSET);

			scrollPos_ = GUILayout.BeginScrollView(scrollPos_);
			foreach (var pack in entries_) {
				GUILayout.Label(pack.Name, EditorStyles.boldLabel);

				GUILayout.BeginHorizontal();

				pack.SelectedToBuild = EditorGUILayout.Toggle("Selected to build", pack.SelectedToBuild);
				if (GUILayout.Button("Edit")) {
					Utils.SelectObject(pack);
				}

				GUILayout.EndHorizontal();

				EditorGUILayout.Space(OFFSET);
				DrawHorizontalGUILine();
			}

			GUILayout.EndScrollView();
		}

		protected virtual void DrawButtons() {
			DrawHorizontalGUILine();

			if (GUILayout.Button($"Build for '{EditorUserBuildSettings.activeBuildTarget}'")) {
				builder_.Build(EditorUserBuildSettings.activeBuildTarget, builderMeta_, authorMeta_, Entries);
			}

			if (GUILayout.Button("Open Build folder")) {
				OpenBuildFolder();
			}
		}

		protected void DrawHorizontalGUILine(int height = 1) {
			GUILayout.Space(OFFSET);

			var rect = GUILayoutUtility.GetRect(1.0f, height, GUILayout.ExpandWidth(true));
			rect.height = height;
			rect.xMin = 0;
			rect.xMax = EditorGUIUtility.currentViewWidth;

			var lineColor = new Color32(0x19, 0x19, 0x19, 0xff);
			EditorGUI.DrawRect(rect, lineColor);
			GUILayout.Space(OFFSET);
		}

		protected virtual void Refresh() {
			authorMeta_ = AuthorMeta.GetInstance();
			builderMeta_ = BaseEditorMeta<T>.GetInstance();

			entries_.Clear();
			entries_.AddRange(BaseEntryMeta<V>.GetAllInstances());
		}

		private void OpenBuildFolder() {
			if (!builderMeta_) {
				Debug.LogError("Kino: Builder meta is null");
				return;
			}

			string buildFolder = Path.GetFullPath(builderMeta_.BuildFolder);

			if (Directory.Exists(buildFolder)) {
				Process.Start(buildFolder);
			}
			else {
				Debug.LogError($"Kino: Unable to open build folder for {typeof(T).Name}, the folder doesn't exists");
			}
		}

		private void CreateAsset<TV>(ref TV metaObject) where TV : BaseEditorMeta<TV> {
			if (metaObject) {
				return;
			}

			metaObject = CreateInstance<TV>();
			if (!metaObject) {
				Debug.LogError($"kino: Unable to create asset '{typeof(TV)}'");
				return;
			}

			string baseFolder = Path.Combine("Assets", metaObject.BaseFolder);
			if (!Directory.Exists(baseFolder)) {
				Directory.CreateDirectory(baseFolder);
			}

			AssetDatabase.CreateAsset(metaObject, Path.Combine(baseFolder, metaObject.AssetName));
			metaObject.Validate();

			AssetDatabase.SaveAssets();

			Refresh();

			Utils.SelectObject(metaObject);
		}
	}
}