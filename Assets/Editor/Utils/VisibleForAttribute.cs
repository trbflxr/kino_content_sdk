using System;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;

// DO NOT EDIT THIS FILE
namespace Editor {
	[AttributeUsage(AttributeTargets.Field)]
	public abstract class VisibleForAttribute : PropertyAttribute {
		public PartType[] Type { get; }

		protected VisibleForAttribute(params PartType[] type) {
			Type = type;
		}
	}

	[AttributeUsage(AttributeTargets.Field)]
	public class BoolVisibleForAttribute : VisibleForAttribute {
		public BoolVisibleForAttribute(params PartType[] type) : base(type) { }
	}

	[AttributeUsage(AttributeTargets.Field)]
	public class RangeVisibleForAttribute : VisibleForAttribute {
		public float Min { get; }
		public float Max { get; }

		public RangeVisibleForAttribute(float min, float max, params PartType[] type) : base(type) {
			Min = min;
			Max = max;
		}
	}

	public class BasePropertyDrawer : PropertyDrawer {
		public override float GetPropertyHeight(SerializedProperty property, GUIContent label) {
			if (ShouldDisplayField(property)) {
				return EditorGUI.GetPropertyHeight(property, label);
			}

			return 0.0f;
		}

		protected bool ShouldDisplayField(SerializedProperty property) {
			var attrib = (VisibleForAttribute) attribute;

			var rootPath = Path.GetFileNameWithoutExtension(property.propertyPath);
			var typePath = $"{rootPath}.Type";

			var objType = property.serializedObject.FindProperty(typePath);

			var holderType = PartType.Undefined;
			if (objType != null) {
				holderType = (PartType) objType.intValue;
			}

			if (attrib.Type == null || !attrib.Type.Contains(holderType)) {
				return false;
			}

			return true;
		}
	}

	[CustomPropertyDrawer(typeof(BoolVisibleForAttribute))]
	public class VisibleForDrawer : BasePropertyDrawer {
		public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
			if (!ShouldDisplayField(property)) {
				return;
			}

			property.boolValue = EditorGUI.Toggle(position, label, property.boolValue);
		}
	}

	[CustomPropertyDrawer(typeof(RangeVisibleForAttribute))]
	public class RangeVisibleForDrawer : BasePropertyDrawer {
		public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
			if (!ShouldDisplayField(property)) {
				return;
			}

			var attrib = (RangeVisibleForAttribute) attribute;
			EditorGUI.Slider(position, property, attrib.Min, attrib.Max, label);
		}
	}
}